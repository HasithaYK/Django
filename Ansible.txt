Configuration Management
============================
This is the process of configuring servers from one point
of control

Advantages
==================
1 Provisioning of Servers
  Setup of s/w's on servers can be done very easily from one point

2 Reduction of usage of resources
  We require less amount of time,money and human resources to configure
  servers

3 Handling Snowflake servers
  After a point of time all servers in the data center behave like
  snowflake servers ie they might be running on slightly different
  h/w and s/w confurations.Configuaration Management tools can pick
  up this info in simple setup file which can be reused to setup
  similar environments

4 Disaster Recovery
  In case of disaster recovery where we can loose an entire data center
  we can recreate similar data center with greater ease

5 Idempotent
  Configuration Management tools are used to bring the servers to a
  specific state called as "desired state",If the rmeote server is 
  already in the desired state CM tools will not reconfigure that server

===========================================================================
Popular CM tools
======================
Ansible
Chef
Puppet
Saltstack


=================================================================
Ansible
=============
This is an open source configuration management tool created using python
The main machine where ansible is installed is called as "Controller"
and the remianing remote servers that we are configuring are called as 
"managed nodes/hosts"

From the controller to the managed nodes we should have passwordless
shh connectivity

Ansible is called as "agentless" ie we need not install any client 
s/w of ansible on the remote managed nodes.It uses "push" methodolgy
to push the configurations into the remote servers.

=========================================================================
Setup of Ansible
====================
1 Create 3 or 4 AWS ubuntu 18 instances
2 NAme the 1st one as controller and remaining 2 as server1 and server2
3 Establish Passwordless ssh from Controller to Server1 and Server2
  a) Connect to server1 using gitbash
  b) Setup password for the default user
     sudo passwd ubuntu
  c) Edit the ssh configuration file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  d) Restart ssh
     sudo service ssh restart
     Repeat the above steps from a to d on Server2 managed node
  e) Connect to Controller using git bash
  f) Generate the ssh keys
     ssh-keygen
  g) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_server1
     Repeat step g with ipaddress of Server2

4 Installing Ansible
  a) Update the apt repository
     sudo apt-get update
  b) Install software-properties-common
     sudo apt-get install -y software-properties-common
  c) Add the latest version of Ansible to apt repository
     sudo apt-add-repository ppa:ansible/ansible
  d) Update the apt repository
     sudo apt-get update
  e) Install ansible
     sudo apt-get install -y ansible

5 To check the verision of ansible
  ansible --version

Ansible stores all the remote servers info in a file called as inventory file
We should open this file and store the ipaddress of all the managed nodes here

sudo vim /etc/ansible/hosts
Here copy and paste the ipaddresses of the managed nodes


==============================================================================
Ansible performs remote configuration of servers in
3 different ways
1 Adhoc commands
2 Playbooks
3 Roles

Ansible uses prebuild Python modules for configuring remote
servers

Important modules in Ansible
===================================
1 command: This is used to execute linux commands on the remote managed
nodes.It is the default module of Ansible

2 shell: This is used to execute shell scripts on the remote managed nodes
  it can execute command related to redirection and piping

3 user: This is used to perform user administartion on the remote servers
like creating users,assigning home dirs deleting users etc

4 file: Used for creating files/directories on the managed nodes

5 copy: This used to copy files/directories to the managed node

6 fetch: Used to copy files/directories from managed nodes to controller

7 apt: Used to for s/w package management like isntalling,deleting,upgrading
  etc.It works on Ubuntu,Debain flvours of linux

8 yum: This is similar to apt but it works on Rehat linux,Centos,Fedora etc
  flavours of Linux

9 service: Used to start stop or restart services on the managed nodes

10 uri: Used to check if a remote url is reachable or not

11 git: Used for perfroming git version controlling on the managed nodes

12 get_url: Used for downloading files from remote servers into the managed nodes

13 stat: Used to capture detailed info about files/directories on the managed nodes

14 debug: Used to display the output in JSON file format

15 include: USed to call child playbooks from a parent playbook

16 replace: Used to replace specific portions of the text in a file

17 docker_container: Used for container management on the managed nodes

18 docker_image: Used to run command related to docker images

19  docker_login: Used to login into the docker registry

20 docker_swarm: Used to setup of docker swarm architecture


====================================================================================
Adhoc command Syntax
==========================
ansible all/group_name/ipaddress -i path_of_inventory -m module_name -a 'arguments'


CommandModule
====================
Ansible command to see the memory info of all managed nodes
ansible all -i /etc/ansible/hosts -m command -a 'free -m'

Note: /etc/ansible/hosts is the deafult inventory file and when working on it
we need not specify the -i option
ansible all  -m command -a 'free -m'

Note: command module is the default module of Ansible and when working on it
we need not specify the -m option
ansible all   -a 'free -m'

===============================================================================
